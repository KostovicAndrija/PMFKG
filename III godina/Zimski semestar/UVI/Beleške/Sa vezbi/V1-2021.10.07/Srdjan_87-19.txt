Datum održavanja: 07.10.2021.
Predavač: Lazar Krstić
Čas: 1
=====================================


Nije neophodna anaconda, može se koristi i običan python



Da bi se kod izvršio u nekom virtuelnom okruženju (virtual
environment-u) potrebno je da se pri njegovom kreiranju
navede i interpreter koji će se koristiti




# komentar

"""
multi-
line
comment
"""


_    # izvršava prethodnu komandu



Zarezom se odvajaju elementi torke

    1,2,3
    
    daje
    
    (1,2,3)
    
    
    
type(tip)    # vraća tip date promenljive


Python je objektni jezik

Tipovi promenljivih ne moraju eksplicitno da se navode


Logički operatori:
- jednakost: ==
- veće: >
- manje: <
- i: and
- ili: or
- negacija: not



5. je float literal



dir(x)    # vraća listu naziva svih metoda koje su vezane za
          # datu instancu
         

U Python-u ne postoje modifieri, npr. nije moguće definisati 
privatnu metodu 

Zbog toga postoji konvencija / standard imenovanja kojim
se taj nedostatak može nadomestiti

[ dodato

Privatni članovi se označavaju tako što se ispred ispred njihovog
imena doda "_" (underscore) znak. Ovo ne ograničava pristup članu
van klase, već samo služi kao indikator drugim programerima da bi
taj član trebao da bude privatan

Primer:
    class Myclass():
    def __init__(self):
        self._variable = 10

        
Name Mangling, tj. postavljanje "__" ispred naziva člana ograničava
spoljašnji pristup članu. Namenjeno je za kreiranje članova kojima
se može pristupiti po nazivu samo iz klase u kojoj su definisani,
tj. njihova namena je pre svega sprečavanje konflikata sa izvedenom
klasom. Naziv tog člana je zamenjen sa "_ImeKlase__naziv promenljive".
Ovakav pristup omogućava slično ponašanje koje imaju imaju privatni
članovi u drugim jezicima.

Primer iz interpretera:
    >>> class MyClass():
    ...     def __init__(self):
    ...             self.__superprivate = "Hello"
    ...             self._semiprivate = ", world!"
    ...
    >>> mc = MyClass()
    >>> print mc.__superprivate
    Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    AttributeError: myClass instance has no attribute '__superprivate'
    >>> mc._MyClass__superprivate
    'Hello'
    >>> print mc._semiprivate
    , world!


Metodi koji oko svog imena (sa obe strane) imaju "__" predstavljaju 
specifične metode (magic methods). Python dozvoljava redefinisanje 
operatora korišćenjem ovog načina označavanja i samog naziva operatora:
    class Point:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y

    def __str__(self):
        return "({0},{1})".format(self.x, self.y)

    def __add__(self, other):
        x = self.x + other.x
        y = self.y + other.y
        return Point(x, y)
        
# primena
    
    p1 = Point(1, 2)
    p2 = Point(2, 3)

    print(p1+p2)

# rezultat
    (3,5)

]
    
    
help(x)    # opis metode / docs



neki_string.lower()

neki_string.upper()

len(niz)


Simbol ";" deli 2 naredbe koje su napisane u jednoj liniji



assert logicki_izraz, "Error message"



Python ne podržava konkatanaciju stringa sa nekim drugim 
tipom (npr. intom)

Konverzija nekog tipa u string:
    str(x)
    
    
    
Try/catch blok:
    try:
        # kod
    expect TypeError as e:
        # handling
        

    
    
print(poruka)



Kreiranje liste:
    lista = [ e, l, e, m, e, n, t, i ];
    

Python podržava negativno indeksiranje

    


lista.append(x)    # dodaje x kao el. liste "lista"


lista.pop()    # izbacuje poslednji element iz liste


Elementi liste ne moraju biti istog tipa


Element liste može biti lista



podržava "slicing", tj. uzimanje jednog dela liste između
2 elementa


lista[1:]    # vraća sve el. od el. sa indeksom 1 pa do kraja


lista.reverse()     # menja redosled elemenata; prvi postaje 
                    # poslednji, poslednji prvi, itd..
                  
                  
sorted(lista)    # vraća listu sačinjenu od sortiranih elemenata
                 # liste "lista" (koja nije modifikovana f-jom)
                
                
                
Kreiranje torke:
    torka = (el1, el2, el3)
    
    

Torka dobija vrednosti samo pri inicijalizaciji i nakon toga
nije moguće promeniti njene vrednosti



Python sadrži tip "set"

Kod skupova nema ponavljanja elemenata 


el in neki_skup    # provera da li je "el" sadržan u skupu


skup.add(x)    # dodavanje elementa u skup


Ne postoji redosled u skupu


set('string')    # pravi skup od date kolekcije, tj.
                 # u slučaju stringa elementi te kolekcije su
                 # karakteri koji ga sačinjavaju
              
              
skup1 & skup2     # presek skupova


skup1 - skup2     # razlika


skup1 | skup2     # unija




Kreiranje rečnika:
    recnik = { "kljuc1" : 1, "kljuc2" : 2, "Kljuc3" : 3 }
    

Pristup:
    recnik["Kljuc3"]
    
    
del recnik[kljuc1]    # brisanje para ključ-vrednost



Redosled u navođenju ključeva nije bitan



recnik.items()    # vraća listu parova ključ-vrednost koji su
                  # torke
               
recnik.keys()     # vraća listu ključeva u rečniku


recnik.values()    # vraća listu vrednosti u rečniku



range( from, to, step )    # kreiranje liste


map( funkcija, lista )    # primenjuje funkciju na svaki el. liste


lambda funkcija je funkcija koja se piše u jednoj liniji i 
anonimna je. Sintaksa
    lambda x: naredbe;


Funkcija map ne vraća listu, već neki specifičan objekat za tu
funkciju. Ukoliko želimo da dobijemo listu od toga koristi se:
    list(resultat)



filter( funkcija, lista )    # vraća listu elemenata date liste
                             # koji su filtrirani pomoću 
                             # prosleđene funkcije
                            
                            

                            
                            
Kreiranje liste (funkcijski pristup):
    lista = [ x for x in neka_lista ]
    
    lista = [ x*x for x in neka_lista if logicki_izraz else "druga povratna vrednost" ]

    

    
    
for petlja u Python-u se ne ponaša kao for petlja u drugim 
jezicima, već kao foreach petlja (iterira po elementima liste)


for el in lista:
    nesto



for i in range(len):
    nesto
    


Python podržava korišćenje ključne reči "elif" umesto "else if"


Ključna reč pass omogućava kreiranje bloka u kome ne postoji
ni jedna komanda što je posledica kreiranja blokova pomoću
belina, a ne nekim simbolima kao što su vitičaste zagrade





Definisanje funkcije:
    def funkcija(argument):
        # naredbe_tela
        
        
Svaka funkcija u Python-u ima povratnu vrednost



Python podržava opcione / default-e parametre. Ukoliko se
opcioni parametar ne navede onda se koristi njegova default-na
vrednost




Kreiranje klase:
    class Naziv:
        # kod
        
        
Nasleđivanje:
    class Dog(Animal):
        # kod
        
        
        
Dokumentacija se piše u multiline komentaru ispod onoga
što se želi dokumentovati




Za razliku od drugih objektnih jezika, u Python-u promenljive
definisane u klasnom scope-u predstavljaju promenljive same
klase (staticke promenljive), a ne promenljive instance



Definisanje konstruktora:
    def __init__( self, parametri.. ):
        # kod
        
        
Primer:
    def __init__( self, name, money ):
        self.name = name
        self.money = money
        

Ključna reč self predstavlja referencu instance, slično kao
this u Javi


print("neki string ima vrednost1 %d i vrednost2 %.2f" % (1,2))


Metode instance moraju da sadrže parametar self u svom potpisu

self se ne prosleđuje kao argument (prosleđuje se implicitno)



Promenljive instance se deklarišu/definišu tokom inicijalizacije. 
Moguće je kreirati promenljivu instance i nakon definisanja cele 
klase:
    class klasa:
        def __init__(self):
            pass
            
    k = klasa()
    k.promenljiva_instance = 5
    print( k.promenljiva_instance )
    
    

Unutar definicije klase, promenljivama instance se pristupa
preko ključne reči self:
    def neki_metod(self):
        self.promenljiva_instance = 10


Klasnim/statičkim promenljivama se pristupa tako što se navede 
naziv same klase nakon koga slede tačka i naziv date promenljive:
    klasa.klasna_promenljiva
    
    
    
    
Za instanciranje ne postoji ključna reč kao što postoji u nekim
jezicima (npr. ključna reč new), već potrebno samo napisati 
naziv klase i zagrade nakon njega:
    klasa = Klasa()
    
    

Pristup nadklasi se vrši pomoću ključne reči super



U Python-u je moguće metodi proslediti neograničen broj 
argumenata korišćenjem args i kwargs (ne moraju tako da
se nazovu)

kwargs skraćeno od keyword arguments

Definiše se na sledeći način:
    def metod( *args, **kwargs ):
        print( kwargs[ args[5] ] )
        
Parametar args pozicione argumente, dok kwargs sadrži
imenovane argumente koji su prosleđeni


Python podržava prosleđivanje argumenata pomoću imena parametra



Stringovi mogu da se množe i to predstavlja ponavljanje stringa
dati broj puta


neki_string.split(sep)    # deli string po stringu "sep", 
                          # default sep je space


sep.join(delovi)    # kreira string spajanjem delova pomoću 
                    # separatora sep
                 
                 

                
Python uvek radi sa referencama, isto kao i Java




Kopiranje elemenata liste:
    # I nacin
    kopija = list(neka_lista)
    
    # II nacin
    import copy
    kopija = copy.copy(neka_lista) # kopira samo vrednosti što
                                   # znači da kopira i 
                                   # vrednosti referenci na
                                   # neke objekte, a ne i sam
                                   # objekat
         
    # kompletno kopiranje; kopiraju se i objekti 
    # na koje reference pokazuju, a ne samo reference
    kopija = copy.deepcopy(neka_lista)
    
    


    
Dve liste mogu sabiranjem da se spoje u jednu veću, kao i 
korišćenjem metode extend



Vrednosti za ključeve rečnika moraju biti vrednosti koje su
hashable (što npr. liste ne mogu da budu jer su promenljive)





for key in sorted( recnik.keys() ):
    # kod
    
    
    
 
 
# with omogućava zatvaranje stream-a nakon njegovog korišćenja
# slično using-u u C#
#
# f je wrapper koji omogućava pristup

    with open(naziv_fajla, 'r') as f:
        for line in f:
            # kod
            
        
        
        
f.write("str")    # upisuje string u fajl, bez dodavanja \n


string.strip()    # omogućava brisanje belina na početku i kraju
                  # stringa
               
               


Virtuelno okruženje omogućava kreiranje istog okruženja na
različitim računarima. Kreira se spisak paketa i onda se on
zajedno sa samim programom isporučuje klijentu, nakon čega
klijent može pri kreiranju svog okruženja da iskoristi taj
fajl (spisak) i tako kreira istovetno okruženje okruženju u 
kome je programer razvijao i testirao program

Takođe omogućava korišćenje različitih verzija paketa u 
različitim projektima. Na računaru može da postoji više 
instaliranih verzija što je dosta fleksibilnija varijanta od
varijante u kojoj je dostupna samo jedna (npr. najnovija), jer
postoje različiti zahtevi/potrebe/ograničenja 


conda env list


Pre instalacije paketa potrebno je aktivirati dato okruženje i
nakon toga je moguće instalirati u njega pakete komandom:
    pip install naziv_paketa

    # ili ovom komandom ukoliko je dostupna list svih paketa
    pip install -r requirements.txt

Kreiranje virtualnog okruženja:
    # anaconda
    conda create -n ime_okruženja python=verzija_pythona
    
    # python
    #
    # u ovom pristupu će poslednji folder u putanji predstavljati 
    # naziv samog okruženja, kao i folder u kome će biti smešteni
    # potrebni fajlovi
        # linux
        python -m venv putanja/do/foldera/ime_okruženja
        
        # windows
        python -m venv putanja\do\foldera\ime_okruženja

 
Aktivacija virtuelnog okruženja:
    # anaconda
    conda activate ime_okruženja
    
    # python 
        # linux
        source putanja/do/foldera/ime_okruženja/bin/activate
        
        # windows
        .putanja\do\foldera\ime_okruženja\Scripts\activate
        

NAPOMENA: ukoliko ne rade komande "pip" i "python" postoji mogućnost
          da je kao podrazumevana verzija python-a postavljena verzija
          2.x.x. Ukoliko je to slučaj moguće je pokrenuti date naredbe
          sa "pip3" i "python3". U slučaju da ni to ne radi onda ili
          python nije instaliran ili se ne nalazi u varijabli okruženja
          (environment variable) čiji je naziv: PATH
        

        
Deaktiviranje virtuelnog okruženja:
    # anaconda
    conda deactivate
    
    # python (CLI)
    deactivate
      
 
