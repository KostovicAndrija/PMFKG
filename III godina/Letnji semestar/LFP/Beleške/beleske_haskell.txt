== Napomene ==

- In Haskell, lists are a homogenous data structure (?)
- redosled definisanja funkcija nije bitan, sve su vidljive svuda u fajlu
- if-else statement je izraz (else deo je obavezan)
- ' se obicno koristi da oznaci da funkcija nije lazy (strict func.) ili modifikovanu verziju funkcije
- funkcija koja ne prima parametre (konstantna) se obicno zove "definition" ili "name"
- "An expression is basically a piece of code that returns a value"
- [1,2,3] is actually just syntactic sugar for 1:2:3:[]
- Watch out when using floating point numbers in ranges! Because they are not completely precise (by definition), their use in ranges can yield some pretty funky results. My advice is not to use them in list ranges
- infix funkcija moze i da se definise kao infix, tj. da ima backticks i u definiciji
- functions are not instances of Show typeclass (they can't be represented with a string)
- GHCi calls "print expression" for "expression" typed in it
- function application "space" character has HIGHEST precedence (left associative), and function application "$" character has LOWEST precedence (rigth associative)
- List in Haskell is like a promise (thunk) of a list, its lazy ([1,2,3] is actually 1:2:3:[])

== Pojmovi ==

- pattern-matching          (?)
- type inference
- referential transpaency   (za iste parametre jedna funkcija garantovano vraca isti rezultat)
- polymorphic function      (genericka funkcija)
- class constraint          (sve pre "=>" u deklaraciji tipa funkcije)
- type annotation           (kad se koristi ":: Tip" u pozivu funkcije, f 1 2 :: Tip)
- enumerated                (= nabrojiv)
- higher order function     (function that accepts a function or returns a function)
- curried functions
- partially applied function

== Typeclass / Data / Record syntax ==

- "value constructors" su funkcije !!!
  data Tip = Kons1 TipPolja1 TipPolja2 | Kons2 TipPolja1 TipPolja2 | ...
- Kad se stavi da value konstruktor ima isto ime kao i tip, to nema nikakvo specijalno znacenje (obicno se stavlja kad postoji samo jedan konstruktor)

- record syntax
    data Tip = Konstruktor { polje :: Tip
                           , polje :: Tip
                           , polje :: Tip
                           ...
                           }
    ** ovako se automatski generisu FUNKCIJE koje predstavljaju data POLJA

- class constraint moze da se ubaci u definiciju type-klase (tu se odnosi na genericki tip instance) i definiciju instance (tu se odnosi na genericki tip tipa koji se "instancira")

== Type variable ==

- This is much like generics in other languages, only in Haskell it's much more powerful because it allows us to easily write very general functions if they don't use any specific behavior of the types in them

- Naznacavanje tipa konstruktora u class definiciji
  class Functor f where
      fmap :: (a -> b) -> f a -> f b
  ** `f` u prvoj liniji je genericki tip ("placeholder"), a u definiciji tipa `fmap` funkcije `f` predstavlja konstruktor tipa `f` koji prima jedan parametar tipa `a` (`b`)


== Lists ==

lista !! x          // x. element (pocevsi od 0)
head lista          // 1. element liste
tail lista          // svi nakon 1. elementa
last lista          // poslednji element
init lista          // svi pre poslednjeg elementa

** head, tail, last, init ne mogu da se koriste na praznoj listi (baca Exception)

length lista        // duzina liste (vraca Int)
null lista          // da li je prazna (vraca Bool), identicno "lista == []"
reverse lista       // suprotan redosled elemenata
take x lista        // vraca listu prvih x elemenata liste
drop x lista        // vraca listu svih elemenata liste sem prvih x
maximum lista       // najveci element
minimum lista       // najmanji element
sum lista           // suma svih elemenata liste
product lista       // proizvod svih elemenata liste
elem x lista        // da li je x clan liste (vraca Bool)

cycle
repeat
replicate

map
filter
takeWhile

foldl
folfr
scanl
scanr

== Pattern matching / Where / Let / Case ==

- "as pattern" (func s@(x:y:ys), s cuva referencu na celu "stvar")
- If all guards evaluate to False (and we haven't provied an otherwise catch-all guard), evaluation falls through to the next pattern.

- where bindings are cyntactic constructs
- where bindings can be also used to pattern match

- let bindings are expressions themselves
- let variables are separated by newline (and indented in same column) or by ; when inline
- let bindings in list comprehension are visible to "output function" (the part before the |) and all predicates and sections that come after of the binding. If let-in binding is defined for particular predicate then its only visible to thad predicate

- pattern matching with function definition is just just syntactic sugar for case expressions !!!
- they are useful for pattern matching against something in the middle of an expression
- case x of pattern -> result
            pattern -> result
            ...


== Monads ==

- In fact, list comprehensions are just syntactic sugar for using lists as monads. In the end, list comprehensions and lists in do notation translate to using >>= to do computations that feature non-determinism.


== Input and Output ==

- Std I/O -

getLine
getContents
getChar

putStr
putStrLn
putChar

print         // putStrLn + show

interact

* specijalne funkcije
when      // ukoliko je prolsedjeno True vraca prosledjeni aplikativni funktor (npr. "IO" akcija), u suprotnom vraca "return ()" (prazna torka zamotana u kontekst tipa datog funktora, npr. "IO ()")
sequence  // za datu listu (Traversable) monada vraca monad sa listom vrednosti izvucenih iz datih monada (npr. "sequence [readLine, readLine]" ce izvrsiti funkcije i vratiti "["linija", "linija"]")
mapM      // primenjuje funkciju koja vraca monad na listu (Foldable) vrednosti i vraca monad sa listom vrednosti na koje je primenjena funkcija (kao "map + sequence")
mapM_     // isto kao "mapM" samo vraca "Monad ()" (nije nam bitan rezultat)
forM      // isto kao "mapM" samo je redosled parametara drugaciji
forever


- Files -

openFile        // vraca handle
withFile        // vraca IO action, koristi handle interno a prima funkciju koja prima handle

readFile        // FilePath -> IO
writeFile       // FilePath -> IO
appendFile      // FilePath -> IO
removeFile      // FilePath -> IO
renameFile      // FilePath -> IO

hGetContents    // Handle ... -> IO
hGetChar        // Handle ... -> IO
hPutStr         // Handle ... -> IO
hPutStrLn       // Handle ... -> IO
...

hClose


* citanje fajla je lazy, kad treba da se iskoristi sadrzaj onda se cita, ali baferovano linija po linija (to je defalt buffer size, a za citanje binary fajlova je default obicno block)

hSetBuffering   // postavlja tip i velicinu bafera za dati fajl
                // NoBuffering, nema baferovanja pa se disk koristi mnogo
                // LineBuffering, baferuje se linija
                // BlockBuffering (Maybe Int), Just pa broj bajtova ili Nothing ako OS treba da odluci o velicini
hFlush          // flushuje bafer

openTempFile    // kreira i otvara novi fajl u izabranom direktorijumu sa izabranim prefiksom za ime
getCurrentDirectory


- Command Line -

getArgs       // -> IO [String]
getProgName   // -> IO String


== Bytestrings ==

pack
unpack

fromChunks
toChunks


Word8
