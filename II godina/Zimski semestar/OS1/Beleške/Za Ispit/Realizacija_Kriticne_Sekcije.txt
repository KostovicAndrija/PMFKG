================ Softverska Realizacija Kriticne Sekcije ================


---------------- Algoritam Striktne Alternacije ----------------

int turn = 0; //Shared
int i = Ja, j = Onaj drugi;

void Proces()
{
    while(true)
    {
        while(true != i); //Busy Wait
        /* kriticna sekcija */
        turn = j; //sad moze drugi proces da udje
        /* ostatak koda */
    }
}

/* Nedostaci */
> Moguca blokada
> Busy Wait


---------------- Kriticna Sekcija Bez Stroge Alternacije ----------------

int flag[2];
flag[0] = flag[1] = 0;
int i = Ja, j = Onaj drugi;

void Proces()
{
    while(true)
    {
        flag[i] = 1;
        while(flag[j]); //Busy Wait
        /* kriticna sekcija */
        flag[i] = 0; //sad moze drugi proces da udje
        /* ostatak koda */
    }
}

/* Nedostaci */
> Blokada
> Busy Wait


---------------- Dekker-Petersonov Algoritam ----------------

int flag[2], turn;
flag[0] = flag[1] = 0;
int i = Ja, j = Onaj drugi;

void Proces()
{
    while(true)
    {
        flag[i] = 1;
        turn = j;
        while(flag[j] && turn == j); //Busy Wait
        /* kriticna sekcija */
        flag[i] = 0; //sad moze drugi proces da udje
        /* ostatak koda */
    }
}

/* Nedostaci */
> Busy Wait


---------------- Pekarski Algoritam ----------------

#define N 100 // N - broj procesa
int biranje[N], broj[N];
biranje = zero_array(); // {0, 0, 0, ...}
broj = random_array(); // npr. {1, 3, 4, 2, 5, 6, 3 ,3, 4, 2 ,5, 3, ...}
int i = Ja;

void Proces()
{
    while(true)
    {
        biranje[i] = 1;
        broj[i] = max(broj) + 1;
        biranje[i] = 0;

        // Busy Wait
        for(int j = 0; j < N; j++)
        {
            while(biranje[j]);
            while(broj[j] > 0 && nisam_ispred(j));
        }

        /* kriticna sekcija */

        broj[i] = 0; //zavrsio sam sa kriticnom sekcijom

        /* ostatak koda */
    }
}

int nisam_ispred(int j)
{
    if(broj[j] < broj[i]) return 1;
    else if(broj[j] == broj[i] && j < i) return 1;
    else return 0;
}

/* Nedostaci */
> Busy Wait



================ Hardverska Realizacija Kriticne Sekcije ================

// Atomicne Hardverske Operacije

bool testset(int *i)
{
    if(*i == 0) {
        *i = 1;
        return true;
    } else
        return false;
}

void exchange(int *a, int *b)
{
    int t = *a;
    *a = *b;
    *b = t;
}


---------------- testset() ----------------

int bolt;

void P(int i)
{
    while(!testset(bolt)); //Busy Wait
    
    /* kriticna sekcija */
    
    bolt = 0;
    /* ostatak koda */
}

void main()
{
    bolt = 0;
    parbegin(P(0), P(1), P(2), ...);
}

/* Nedostaci */
> Busy Wait
> Moguce Gladovanje
> Moguce Uzajamno Blokiranje (Na jednoprocesorskim sistemima sa semom prioriteta)

---------------- exchange() ----------------

int bolt;

void P(int i)
{
    int key = 1;
    do exchange(bolt, key)
    while(key != 0); //Busy Wait
    
    /* kriticna sekcija */
    
    bolt = 0;
    /* ostatak koda */
}

void main()
{
    bolt = 0;
    parbegin(P(0), P(1), P(2), ...);
}

/* Nedostaci */
> Busy Wait
> Moguce Gladovanje
> Moguce Uzajamno Blokiranje (Na jednoprocesorskim sistemima sa semom prioriteta)



================ Semafori ================

// to be continued ...



